/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
//#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/imagemanager/primitives.h>
#include <vector>

namespace facebook {
namespace react {

struct RNSVGColorFillStruct {
  int type;
  SharedColor payload;
  std::string brushRef;
};

static inline void fromRawValue( const RawValue &value, RNSVGColorFillStruct &result) {
  auto map = (better::map<std::string, RawValue>)value;

  auto tmp_type = map.find("type");
  if (tmp_type != map.end()) {
    fromRawValue( tmp_type->second, result.type);
  }
  auto tmp_payload = map.find("payload");
  if (tmp_payload != map.end()) {
    fromRawValue( tmp_payload->second, result.payload);
  }
  auto tmp_brushRef = map.find("brushRef");
  if (tmp_brushRef != map.end()) {
    fromRawValue( tmp_brushRef->second, result.brushRef);
  }
}

static inline std::string toString(const RNSVGColorFillStruct &value) {
  return "[Object RNSVGColorFillStruct ]";
}

struct RNSVGFontStruct {
  std::string fontStyle;
  std::string fontVariant;
  std::string fontWeight;
  std::string fontStretch;
  std::string fontSize;
  std::string fontFamily;
  std::string textAnchor;
  std::string textDecoration;
  std::string letterSpacing;
  std::string wordSpacing;
  std::string kerning;
  std::string fontFeatureSettings;
  std::string fontVariantLigatures;
  std::string fontVariationSettings;
};

static inline void fromRawValue( const RawValue &value, RNSVGFontStruct &result) {
  auto map = (better::map<std::string, RawValue>)value;

  auto tmp_fontStyle = map.find("fontStyle");
  if (tmp_fontStyle != map.end()) {
    fromRawValue( tmp_fontStyle->second, result.fontStyle);
  }
  auto tmp_fontVariant = map.find("fontVariant");
  if (tmp_fontVariant != map.end()) {
    fromRawValue( tmp_fontVariant->second, result.fontVariant);
  }
  auto tmp_fontWeight = map.find("fontWeight");
  if (tmp_fontWeight != map.end()) {
    fromRawValue( tmp_fontWeight->second, result.fontWeight);
  }
  auto tmp_fontStretch = map.find("fontStretch");
  if (tmp_fontStretch != map.end()) {
    fromRawValue( tmp_fontStretch->second, result.fontStretch);
  }
  auto tmp_fontSize = map.find("fontSize");
  if (tmp_fontSize != map.end()) {
    fromRawValue( tmp_fontSize->second, result.fontSize);
  }
  auto tmp_fontFamily = map.find("fontFamily");
  if (tmp_fontFamily != map.end()) {
    fromRawValue( tmp_fontFamily->second, result.fontFamily);
  }
  auto tmp_textAnchor = map.find("textAnchor");
  if (tmp_textAnchor != map.end()) {
    fromRawValue( tmp_textAnchor->second, result.textAnchor);
  }
  auto tmp_textDecoration = map.find("textDecoration");
  if (tmp_textDecoration != map.end()) {
    fromRawValue( tmp_textDecoration->second, result.textDecoration);
  }
  auto tmp_letterSpacing = map.find("letterSpacing");
  if (tmp_letterSpacing != map.end()) {
    fromRawValue( tmp_letterSpacing->second, result.letterSpacing);
  }
  auto tmp_wordSpacing = map.find("wordSpacing");
  if (tmp_wordSpacing != map.end()) {
    fromRawValue( tmp_wordSpacing->second, result.wordSpacing);
  }
  auto tmp_kerning = map.find("kerning");
  if (tmp_kerning != map.end()) {
    fromRawValue( tmp_kerning->second, result.kerning);
  }
  auto tmp_fontFeatureSettings = map.find("fontFeatureSettings");
  if (tmp_fontFeatureSettings != map.end()) {
    fromRawValue( tmp_fontFeatureSettings->second, result.fontFeatureSettings);
  }
  auto tmp_fontVariantLigatures = map.find("fontVariantLigatures");
  if (tmp_fontVariantLigatures != map.end()) {
    fromRawValue( tmp_fontVariantLigatures->second, result.fontVariantLigatures);
  }
  auto tmp_fontVariationSettings = map.find("fontVariationSettings");
  if (tmp_fontVariationSettings != map.end()) {
    fromRawValue( tmp_fontVariationSettings->second, result.fontVariationSettings);
  }
}

static inline std::string toString(const RNSVGFontStruct &value) {
  return "[Object RNSVGFontStruct]";
}

class RNSVGCommonNodeProps {
public:
  RNSVGCommonNodeProps() = default;
  RNSVGCommonNodeProps( const RNSVGCommonNodeProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props
  std::string name{};
  Float opacity{1.0};
  std::vector<Float> matrix{};
  std::string mask{};
  std::string markerStart{};
  std::string markerMid{};
  std::string markerEnd{};
  std::string clipPath{};
  int clipRule{0};
  bool responsible{false};
  std::string display{};
  std::string pointerEvents{};
};

class RNSVGCommonRenderableProps  {
 public:
  RNSVGCommonRenderableProps() = default;
  RNSVGCommonRenderableProps( const RNSVGCommonRenderableProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props
  RNSVGColorFillStruct fill{};
  Float fillOpacity{1.0};
  int fillRule{1};
  RNSVGColorFillStruct stroke{};
  Float strokeOpacity{1.0};
  std::string strokeWidth{"1"};
  int strokeLinecap{0};
  int strokeLinejoin{0};
  std::vector<std::string> strokeDasharray{};
  Float strokeDashoffset{0.0};
  Float strokeMiterlimit{0.0};
  int vectorEffect{0};
  std::vector<std::string> propList{};
};
class RNSVGGroupCommonrops {
 public:
  RNSVGGroupCommonrops() = default;
  RNSVGGroupCommonrops( const RNSVGGroupCommonrops &sourceProps, const RawProps &rawProps);

  std::string fontSize{};
  std::string fontWeight{};
  RNSVGFontStruct font{};
};

// SVG ELEMENT PROPERTIES
class RNSVGCircleProps final : public ViewProps , public RNSVGCommonNodeProps, public RNSVGCommonRenderableProps {
 public:
  RNSVGCircleProps() = default;
  RNSVGCircleProps( const RNSVGCircleProps &sourceProps, const RawProps &rawProps);

  #pragma mark - Native Props

  std::string cx{};
  std::string cy{};
  std::string r{};
};

class RNSVGClipPathProps final : public ViewProps ,
                                 public RNSVGCommonNodeProps, 
                                 public RNSVGCommonRenderableProps,
                                 public RNSVGGroupCommonrops{
 public:
  RNSVGClipPathProps() = default;
  RNSVGClipPathProps( const RNSVGClipPathProps &sourceProps, const RawProps &rawProps);

};

class RNSVGDefsProps final : public ViewProps, public RNSVGCommonNodeProps {
 public:
  RNSVGDefsProps() = default;
  RNSVGDefsProps( const RNSVGDefsProps &sourceProps, const RawProps &rawProps);
 
};

class RNSVGEllipseProps final : public ViewProps, public RNSVGCommonNodeProps , public RNSVGCommonRenderableProps{
 public:
  RNSVGEllipseProps() = default;
  RNSVGEllipseProps( const RNSVGEllipseProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string cx{};
  std::string cy{};
  std::string rx{};
  std::string ry{};
};

class RNSVGForeignObjectProps final : public ViewProps, 
                                      public RNSVGCommonNodeProps, 
                                      public RNSVGCommonRenderableProps,
                                      public RNSVGGroupCommonrops {
 public:
  RNSVGForeignObjectProps() = default;
  RNSVGForeignObjectProps( const RNSVGForeignObjectProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x{};
  std::string y{};
  std::string height{};
  std::string width{};
};

class RNSVGGroupProps final : public ViewProps, 
                              public RNSVGCommonNodeProps, 
                              public RNSVGCommonRenderableProps,
                              public RNSVGGroupCommonrops {
 public:
  RNSVGGroupProps() = default;
  RNSVGGroupProps( const RNSVGGroupProps &sourceProps, const RawProps &rawProps);

};

class RNSVGImageProps final : public ViewProps, public RNSVGCommonNodeProps, public RNSVGCommonRenderableProps {
 public:
  RNSVGImageProps() = default;
  RNSVGImageProps( const RNSVGImageProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x{};
  std::string y{};
  std::string width{};
  std::string height{};
  ImageSource src{};
  std::string align{};
  int meetOrSlice{0};
};

class RNSVGLinearGradientProps final : public ViewProps, public RNSVGCommonNodeProps {
 public:
  RNSVGLinearGradientProps() = default;
  RNSVGLinearGradientProps( const RNSVGLinearGradientProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x1{};
  std::string y1{};
  std::string x2{};
  std::string y2{};
  std::vector<Float> gradient{};
  int gradientUnits{0};
  std::vector<Float> gradientTransform{};
};

class RNSVGLineProps final : public ViewProps , public RNSVGCommonNodeProps, public RNSVGCommonRenderableProps{
 public:
  RNSVGLineProps() = default;
  RNSVGLineProps( const RNSVGLineProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x1{};
  std::string y1{};
  std::string x2{};
  std::string y2{};
};

class RNSVGMarkerProps final : public ViewProps, 
                               public RNSVGCommonNodeProps, 
                               public RNSVGCommonRenderableProps,
                               public RNSVGGroupCommonrops {
 public:
  RNSVGMarkerProps() = default;
  RNSVGMarkerProps( const RNSVGMarkerProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string refX{};
  std::string refY{};
  std::string markerHeight{};
  std::string markerWidth{};
  std::string markerUnits{};
  std::string orient{};
  Float minX{0.0};
  Float minY{0.0};
  Float vbWidth{0.0};
  Float vbHeight{0.0};
  std::string align{};
  int meetOrSlice{0};
};

class RNSVGMaskProps final : public ViewProps, 
                             public RNSVGCommonNodeProps ,
                             public RNSVGCommonRenderableProps,
                             public RNSVGGroupCommonrops {
 public:
  RNSVGMaskProps() = default;
  RNSVGMaskProps( const RNSVGMaskProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x{};
  std::string y{};
  std::string height{};
  std::string width{};
  int maskUnits{0};
  int maskContentUnits{0};
  std::vector<Float> maskTransform{};
};

class RNSVGPathProps final : public ViewProps, public RNSVGCommonNodeProps , public RNSVGCommonRenderableProps{
 public:
  RNSVGPathProps() = default;
  RNSVGPathProps( const RNSVGPathProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string d{};
};

class RNSVGPatternProps final : public ViewProps, 
                                public RNSVGCommonNodeProps, 
                                public RNSVGCommonRenderableProps,
                                public RNSVGGroupCommonrops {
 public:
  RNSVGPatternProps() = default;
  RNSVGPatternProps( const RNSVGPatternProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x{};
  std::string y{};
  std::string height{};
  std::string width{};
  int patternUnits{0};
  int patternContentUnits{0};
  std::vector<Float> patternTransform{};
  Float minX{0.0};
  Float minY{0.0};
  Float vbWidth{0.0};
  Float vbHeight{0.0};
  std::string align{};
  int meetOrSlice{0};
};

class RNSVGRadialGradientProps final : public ViewProps, public RNSVGCommonNodeProps {
 public:
  RNSVGRadialGradientProps() = default;
  RNSVGRadialGradientProps( const RNSVGRadialGradientProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string fx{};
  std::string fy{};
  std::string cx{};
  std::string cy{};
  std::string rx{};
  std::string ry{};
  std::vector<Float> gradient{};
  int gradientUnits{0};
  std::vector<Float> gradientTransform{};
};

class RNSVGRectProps final : public ViewProps, public RNSVGCommonNodeProps , public RNSVGCommonRenderableProps{
 public:
  RNSVGRectProps() = default;
  RNSVGRectProps( const RNSVGRectProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string x{};
  std::string y{};
  std::string height{};
  std::string width{};
  std::string rx{};
  std::string ry{};
};

class RNSVGSvgViewProps final : public ViewProps {
 public:
  RNSVGSvgViewProps() = default;
  RNSVGSvgViewProps( const RNSVGSvgViewProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  std::string bbWidth{};
  std::string bbHeight{};
  Float minX{0.0};
  Float minY{0.0};
  Float vbWidth{0.0};
  Float vbHeight{0.0};
  std::string align{};
  int meetOrSlice{0};
  std::string tintColor{};
  std::string color{};
  std::string pointerEvents{};
};

class RNSVGSymbolProps final : public ViewProps , 
                               public RNSVGCommonNodeProps, 
                               public RNSVGCommonRenderableProps,
                               public RNSVGGroupCommonrops{
 public:
  RNSVGSymbolProps() = default;
  RNSVGSymbolProps( const RNSVGSymbolProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  Float minX{0.0};
  Float minY{0.0};
  Float vbWidth{0.0};
  Float vbHeight{0.0};
  std::string align{};
  int meetOrSlice{0};
};

class RNSVGTextProps final : public ViewProps , 
                             public RNSVGCommonNodeProps, 
                             public RNSVGCommonRenderableProps,
                             public RNSVGGroupCommonrops {
 public:
  RNSVGTextProps() = default;
  RNSVGTextProps( const RNSVGTextProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::vector<std::string> dx{};
  std::vector<std::string> dy{};
  std::vector<std::string> x{};
  std::vector<std::string> y{};
  std::vector<std::string> rotate{};
  std::string inlineSize{};
  std::string textLength{};
  std::string baselineShift{};
  std::string lengthAdjust{};
  std::string alignmentBaseline{};
  std::string verticalAlign{};
};

class RNSVGTextPathProps final : public ViewProps, 
                                 public RNSVGCommonNodeProps, 
                                 public RNSVGCommonRenderableProps ,
                                 public RNSVGGroupCommonrops {
 public:
  RNSVGTextPathProps() = default;
  RNSVGTextPathProps( const RNSVGTextPathProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::vector<std::string> dx{};
  std::vector<std::string> dy{};
  std::vector<std::string> x{};
  std::vector<std::string> y{};
  std::vector<std::string> rotate{};
  std::string inlineSize{};
  std::string textLength{};
  std::string baselineShift{};
  std::string lengthAdjust{};
  std::string alignmentBaseline{};
  std::string verticalAlign{};
  std::string href{};
  std::string side{};
  std::string method{};
  std::string midLine{};
  std::string spacing{};
  std::string startOffset{};
};

class RNSVGTSpanProps final : public ViewProps , 
                              public RNSVGCommonNodeProps, 
                              public RNSVGCommonRenderableProps,
                              public RNSVGGroupCommonrops {
 public:
  RNSVGTSpanProps() = default;
  RNSVGTSpanProps( const RNSVGTSpanProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::vector<std::string> dx{};
  std::vector<std::string> dy{};
  std::vector<std::string> x{};
  std::vector<std::string> y{};
  std::vector<std::string> rotate{};
  std::string inlineSize{};
  std::string textLength{};
  std::string baselineShift{};
  std::string lengthAdjust{};
  std::string alignmentBaseline{};
  std::string verticalAlign{};
  std::string content{};
};

class RNSVGUseProps final : public ViewProps, public RNSVGCommonNodeProps, public RNSVGCommonRenderableProps {
 public:
  RNSVGUseProps() = default;
  RNSVGUseProps( const RNSVGUseProps &sourceProps, const RawProps &rawProps);

#pragma mark - Native Props

  std::string href{};
  std::string x{};
  std::string y{};
  std::string height{};
  std::string width{};
};

} // namespace react
} // namespace facebook
